{
    "swagger": "2.0",
    "info": {
        "description": "This is a crud of people.",
        "title": "Person API",
        "contact": {},
        "license": {},
        "version": "1.0"
    },
    "basePath": "/v1",
    "paths": {
        "/person": {
            "get": {
                "description": "Find people",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Find people",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Person"
                            }
                        }
                    },
                    "500": {
                        "description": "When a internal error occur.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create person",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Create person",
                "parameters": [
                    {
                        "description": "Create person",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Person"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.Person"
                        }
                    },
                    "400": {
                        "description": "When the client sends the body with an invalid field.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "422": {
                        "description": "When the client sends a broken body.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "When a internal error occur.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        },
        "/person/{id}": {
            "get": {
                "description": "Find person",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Find person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Person"
                            }
                        }
                    },
                    "404": {
                        "description": "When not find a person.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "When a internal error occur.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Update person",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Update person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Person"
                            }
                        }
                    },
                    "400": {
                        "description": "When the client sends the body with an invalid field.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "404": {
                        "description": "When not find a person.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "422": {
                        "description": "When the client sends a broken body.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "500": {
                        "description": "When a internal error occur.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Update person",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Update person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "When the client sends a invalid id",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    },
                    "404": {
                        "description": "When not find a person.",
                        "schema": {
                            "$ref": "#/definitions/dto.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.Person": {
            "type": "object",
            "required": [
                "age",
                "email",
                "name"
            ],
            "properties": {
                "age": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}